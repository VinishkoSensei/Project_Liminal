--
-- PostgreSQL database dump
--

-- Dumped from database version 12.6 (Ubuntu 12.6-0ubuntu0.20.04.1)
-- Dumped by pg_dump version 12.6 (Ubuntu 12.6-0ubuntu0.20.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: liminal; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA liminal;


ALTER SCHEMA liminal OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: author; Type: TABLE; Schema: liminal; Owner: postgres
--

CREATE TABLE liminal.author (
    id integer NOT NULL,
    nickname character varying(50) NOT NULL,
    family_name character varying(50),
    name character varying(50)
);


ALTER TABLE liminal.author OWNER TO postgres;

--
-- Name: author_id_seq; Type: SEQUENCE; Schema: liminal; Owner: postgres
--

CREATE SEQUENCE liminal.author_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE liminal.author_id_seq OWNER TO postgres;

--
-- Name: author_id_seq; Type: SEQUENCE OWNED BY; Schema: liminal; Owner: postgres
--

ALTER SEQUENCE liminal.author_id_seq OWNED BY liminal.author.id;


--
-- Name: genre; Type: TABLE; Schema: liminal; Owner: postgres
--

CREATE TABLE liminal.genre (
    id integer NOT NULL,
    name character varying(50)
);


ALTER TABLE liminal.genre OWNER TO postgres;

--
-- Name: genre_id_seq; Type: SEQUENCE; Schema: liminal; Owner: postgres
--

CREATE SEQUENCE liminal.genre_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE liminal.genre_id_seq OWNER TO postgres;

--
-- Name: genre_id_seq; Type: SEQUENCE OWNED BY; Schema: liminal; Owner: postgres
--

ALTER SEQUENCE liminal.genre_id_seq OWNED BY liminal.genre.id;


--
-- Name: track; Type: TABLE; Schema: liminal; Owner: postgres
--

CREATE TABLE liminal.track (
    id integer NOT NULL,
    path character varying(150) NOT NULL,
    name character varying(50) NOT NULL,
    author_id integer,
    genre_id integer,
    cover character varying(150),
    duration time(0) without time zone
);


ALTER TABLE liminal.track OWNER TO postgres;

--
-- Name: track_id_seq; Type: SEQUENCE; Schema: liminal; Owner: postgres
--

CREATE SEQUENCE liminal.track_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE liminal.track_id_seq OWNER TO postgres;

--
-- Name: track_id_seq; Type: SEQUENCE OWNED BY; Schema: liminal; Owner: postgres
--

ALTER SEQUENCE liminal.track_id_seq OWNED BY liminal.track.id;


--
-- Name: users; Type: TABLE; Schema: liminal; Owner: postgres
--

CREATE TABLE liminal.users (
    id integer NOT NULL,
    last_name character varying(50) NOT NULL,
    first_name character varying(50) NOT NULL,
    middle_name character varying(50),
    birth_date date NOT NULL,
    subscribed boolean DEFAULT false NOT NULL,
    email character varying(50) NOT NULL,
    phone character varying(15) NOT NULL,
    avatar character varying(200),
    password character varying(100)
);


ALTER TABLE liminal.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: liminal; Owner: postgres
--

CREATE SEQUENCE liminal.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE liminal.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: liminal; Owner: postgres
--

ALTER SEQUENCE liminal.users_id_seq OWNED BY liminal.users.id;


--
-- Name: author id; Type: DEFAULT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.author ALTER COLUMN id SET DEFAULT nextval('liminal.author_id_seq'::regclass);


--
-- Name: genre id; Type: DEFAULT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.genre ALTER COLUMN id SET DEFAULT nextval('liminal.genre_id_seq'::regclass);


--
-- Name: track id; Type: DEFAULT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.track ALTER COLUMN id SET DEFAULT nextval('liminal.track_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.users ALTER COLUMN id SET DEFAULT nextval('liminal.users_id_seq'::regclass);


--
-- Data for Name: author; Type: TABLE DATA; Schema: liminal; Owner: postgres
--

COPY liminal.author (id, nickname, family_name, name) FROM stdin;
1	Test Author #1	Test	Test
2	Test Author #2	Test 2	Test 2
\.


--
-- Data for Name: genre; Type: TABLE DATA; Schema: liminal; Owner: postgres
--

COPY liminal.genre (id, name) FROM stdin;
1	Test Genre
2	Test Genre 2
\.


--
-- Data for Name: track; Type: TABLE DATA; Schema: liminal; Owner: postgres
--

COPY liminal.track (id, path, name, author_id, genre_id, cover, duration) FROM stdin;
1	./files/music/1.mp3	Track 1	1	1	1.jpg	00:01:05
3	./files/music/3.mp3	Track 3	1	1	3.jpg	00:01:00
2	./files/music/2.mp3	Track 2	2	2	2.jpg	00:02:02
4	./files/music/1.mp3	Track 4	1	1	1.jpg	00:01:05
5	./files/music/3.mp3	Track 5	1	1	3.jpg	00:01:00
6	./files/music/2.mp3	Track 6	2	2	2.jpg	00:02:02
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: liminal; Owner: postgres
--

COPY liminal.users (id, last_name, first_name, middle_name, birth_date, subscribed, email, phone, avatar, password) FROM stdin;
1	Doe	John	\N	1997-01-01	t	johndoe@gmail.com	9992134567	1.jpg	johndoe
\.


--
-- Name: author_id_seq; Type: SEQUENCE SET; Schema: liminal; Owner: postgres
--

SELECT pg_catalog.setval('liminal.author_id_seq', 2, true);


--
-- Name: genre_id_seq; Type: SEQUENCE SET; Schema: liminal; Owner: postgres
--

SELECT pg_catalog.setval('liminal.genre_id_seq', 2, true);


--
-- Name: track_id_seq; Type: SEQUENCE SET; Schema: liminal; Owner: postgres
--

SELECT pg_catalog.setval('liminal.track_id_seq', 6, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: liminal; Owner: postgres
--

SELECT pg_catalog.setval('liminal.users_id_seq', 18, true);


--
-- Name: author author_pkey; Type: CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.author
    ADD CONSTRAINT author_pkey PRIMARY KEY (id);


--
-- Name: genre genre_pkey; Type: CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.genre
    ADD CONSTRAINT genre_pkey PRIMARY KEY (id);


--
-- Name: track track_pkey; Type: CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.track
    ADD CONSTRAINT track_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: track track_author_id_fkey; Type: FK CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.track
    ADD CONSTRAINT track_author_id_fkey FOREIGN KEY (author_id) REFERENCES liminal.author(id);


--
-- Name: track track_genre_id_fkey; Type: FK CONSTRAINT; Schema: liminal; Owner: postgres
--

ALTER TABLE ONLY liminal.track
    ADD CONSTRAINT track_genre_id_fkey FOREIGN KEY (genre_id) REFERENCES liminal.genre(id);


--
-- PostgreSQL database dump complete
--

-- =========================================
CREATE TABLE liminal.author (
	id serial NOT NULL,
	nickname varchar(50) NOT NULL,
	family_name varchar(50) NULL,
	"name" varchar(50) NULL,
	CONSTRAINT author_pkey PRIMARY KEY (id)
);

CREATE TABLE liminal.genre (
	id serial NOT NULL,
	"name" varchar(50) NULL,
	CONSTRAINT genre_pkey PRIMARY KEY (id)
);

CREATE TABLE liminal.login (
	id serial NOT NULL,
	email varchar(50) NOT NULL,
	hash text NULL,
	CONSTRAINT login_pkey PRIMARY KEY (id)
);

CREATE TABLE liminal.track (
	id serial NOT NULL,
	"path" varchar(150) NOT NULL,
	"name" varchar(50) NOT NULL,
	author_id int4 NULL,
	genre_id int4 NULL,
	cover varchar(150) NULL,
	duration time(0) NULL,
	CONSTRAINT track_pkey PRIMARY KEY (id)
);

CREATE TABLE liminal."user" (
	id int4 NOT NULL,
	last_name varchar(50) NOT NULL,
	first_name varchar(50) NOT NULL,
	middle_name varchar(50) NULL,
	birth_date date NOT NULL,
	subscribed bool NOT NULL DEFAULT false,
	email varchar(50) NOT NULL,
	phone varchar(15) NOT NULL,
	avatar varchar(200) NULL,
	CONSTRAINT users_c_email UNIQUE (email),
	CONSTRAINT users_c_phone UNIQUE (phone),
	CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE OR REPLACE FUNCTION liminal.gettrack(tid integer)
 RETURNS TABLE(id integer, path character varying, name character varying, cover character varying, duration text, author character varying, genre character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN QUERY SELECT t.id, t."path",	t."name", t.cover, to_char(t.duration,'MI:SS') as "duration", a."name" , g."name" FROM liminal.track t
	join liminal.author a on t.author_id = a.id 
	join liminal.genre g on t.genre_id = g.id 
	WHERE t.id = tid;
END;
$function$
;

CREATE OR REPLACE FUNCTION liminal.gettracklist(ttrackname character varying DEFAULT NULL::character varying, tnickname character varying DEFAULT NULL::character varying)
 RETURNS TABLE(id integer, path character varying, name character varying, cover character varying, duration text, author character varying, genre character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
  
	if ttrackname is null then 
	RETURN QUERY SELECT t.id, t."path", t."name", t.cover, 
	    to_char(t.duration,'MI:SS') as "duration", 
		a.nickname as "author", g.name as "genre" 
		FROM liminal.track t 
		JOIN liminal.author a ON t.author_id=a.id 
		JOIN liminal.genre g ON t.genre_id=g.id 
		WHERE lower(a.nickname) ilike '%'||tnickname||'%' 
		order by t.id;
	
	elseif tnickname is null then 
	RETURN QUERY SELECT t.id, t."path", t."name", t.cover, 
	    to_char(t.duration,'MI:SS') as "duration", 
		a.nickname as "author", g.name as "genre" 
		FROM liminal.track t 
		JOIN liminal.author a ON t.author_id=a.id 
		JOIN liminal.genre g ON t.genre_id=g.id 
		WHERE lower(t."name") ilike '%'||ttrackname||'%'
		order by t.id;
	else 
	RETURN QUERY SELECT t.id, t."path", t."name", t.cover, 
	    to_char(t.duration,'MI:SS') as "duration", 
		a.nickname as "author", g.name as "genre" 
		FROM liminal.track t 
		JOIN liminal.author a ON t.author_id=a.id 
		JOIN liminal.genre g ON t.genre_id=g.id 
		WHERE lower(a.nickname) ilike '%'||tnickname||'%' 
		or lower(t."name") ilike '%'||ttrackname||'%'
		order by t.id;
  end if;  
END;
$function$
;

CREATE OR REPLACE FUNCTION liminal.gettracklist()
 RETURNS TABLE(id integer, path character varying, name character varying, cover character varying, duration text, author character varying, genre character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
	RETURN QUERY SELECT t.id, t."path", t."name", t.cover, 
	    to_char(t.duration,'MI:SS') as "duration", 
		a.nickname as "author", g.name as "genre" 
		FROM liminal.track t 
		JOIN liminal.author a ON t.author_id=a.id 
		JOIN liminal.genre g ON t.genre_id=g.id 
		order by t.id; 
END;
$function$
;

CREATE OR REPLACE FUNCTION liminal.getuser(tid integer)
 RETURNS TABLE(id integer, last_name character varying, first_name character varying, middle_name character varying, birth_date text, subscribed boolean, email character varying, phone character varying, avatar character varying)
 LANGUAGE plpgsql
AS $function$
begin
    RETURN QUERY SELECT u.id, u.last_name, u.first_name, u.middle_name, 
    to_char(u.birth_date,'DD.MM.YYYY') as "birth_date", 
    u.subscribed, u.email, u.phone, u.avatar
	FROM liminal.user u
	where u.id=tid;
END;
$function$
;

CREATE OR REPLACE FUNCTION liminal.getuser(tid integer, temail character varying)
 RETURNS TABLE(id integer, last_name character varying, first_name character varying, middle_name character varying, birth_date text, subscribed boolean, email character varying, phone character varying, avatar character varying)
 LANGUAGE plpgsql
AS $function$
begin
    RETURN QUERY SELECT u.id, u.last_name, u.first_name, u.middle_name, 
    to_char(u.birth_date,'DD.MM.YYYY') as "birth_date", 
    u.subscribed, u.email, u.phone, u.avatar
	FROM liminal.user u
	where u.id=tid and u.email = temail;
END;
$function$
;

CREATE OR REPLACE FUNCTION liminal.getusercreds(temail character varying)
 RETURNS TABLE(id integer, hash text)
 LANGUAGE plpgsql
AS $function$
begin
    RETURN QUERY SELECT l.id ,l.hash 
	FROM liminal.login l
	where l.email = temail;
END;
$function$
;

CREATE OR REPLACE PROCEDURE liminal.register(last_name character varying, first_name character varying, birth_date date, email character varying, phone character varying, avatar character varying, hash text)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
   l_id integer;
BEGIN
	INSERT INTO liminal.login(email, hash)
	VALUES (email, hash)
	RETURNING id INTO l_id;

	insert into liminal.user(id,last_name,first_name,birth_date,email,phone,avatar)
	values (l_id,last_name,first_name,birth_date,email,phone,avatar);
end;
$procedure$
;
